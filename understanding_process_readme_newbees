# Understanding This MCP + Kubernetes Server (Beginner Friendly)

Welcome! This document helps new contributors understand how this Go project exposes Kubernetes operations to GitHub Copilot via the Model Context Protocol (MCP).

## What is MCP?

MCP is a simple protocol that lets a client (like GitHub Copilot) talk to external tools over stdio using JSON-RPC 2.0. The client sends requests such as `initialize`, `tools/list`, and `tools/call`, and the server responds with JSON.

Our server implements MCP over stdin/stdout:
- Requests arrive on stdin
- Responses are written to stdout
- Logs go to stderr (never stdout)

## How this project connects Copilot to Kubernetes

- The server boots quickly and answers `initialize` immediately
- After the handshake, it initializes a Kubernetes client (from `KUBECONFIG` or in-cluster) in the background
- The server registers a set of MCP tools that perform Kubernetes operations (listing pods, getting resources, updating secrets, etc.)
- The Copilot MCP client calls these tools based on your prompts in VS Code

## Request/Response lifecycle

1. Copilot launches the server using stdio
2. Copilot sends `initialize`
3. Server responds immediately with capabilities and starts background Kubernetes setup
4. Copilot sends `tools/list` to discover available tools
5. Copilot calls tools using `tools/call` with a `name` and JSON `arguments`

Transports supported:
- Framed (LSP-style): `Content-Length: N\r\n\r\n<JSON>`
- NDJSON: each JSON request on its own line (useful for CLI testing)

## Logging and errors

- All logs are written to stderr using Go's `slog` (configured in `cmd/server/main.go`)
- Only JSON-RPC responses go to stdout
- Unknown methods return JSON-RPC error `{ "code": -32601, "message": "Method not found" }`
- Tool errors return JSON-RPC error `{ "code": -32000, "message": "..." }`

## Current tools (kebab-case)

- cluster
  - `cluster-health`
  - `cluster-list-contexts`
  - `cluster-set-context`
  - `ns-list-namespaces`
- workloads
  - `pods-list-pods`
  - `pods-get`
  - `pods-logs`
  - `pods-exec`
- resources
  - `resources-get`
  - `resources-apply`
  - `resources-delete`
- secrets
  - `secrets-get`
  - `secrets-set`
- utility
  - `echo`

Note: If the Kubernetes client is not ready yet, Kubernetes-dependent tools will return `"Kubernetes client not initialized yet"`.

## Common pitfalls

- Tool names must be kebab-case and match `[a-z0-9-]` (no dots, underscores, or CamelCase)
- Do not block `initialize`â€”long-running setup runs in the background
- Do not write logs to stdout (responses only); use stderr for logs
- Framed mode requires exact `Content-Length` and `\r\n\r\n` separators

## Building and testing quickly

```bash
go build -o bin/mcp-server ./cmd/server
# NDJSON quick handshake
echo '{"jsonrpc":"2.0","id":1,"method":"initialize","params":{}}' | ./bin/mcp-server
# Framed example
./scripts/validate.sh
```

## How to add a new tool

1. Pick a kebab-case name, e.g., `deployments-list`
2. Implement the handler in the appropriate file under `internal/tools/` (e.g., `workloads.go`):
   - Define a `mcp.Tool{Name: "deployments-list", Description: "...", Handler: func(ctx context.Context, params json.RawMessage) (any, error) { ... }}`
   - Parse `params` into a struct using `json.Unmarshal`
   - Perform Kubernetes logic using helpers from `pkg/k8s`
   - Return data as structured Go maps/structs or strings; responses go into MCP content/json wrapper by the registry
3. Register the tool in the corresponding `Register*` function (e.g., `RegisterWorkloads`)
4. If the tool needs Kubernetes, it will be unavailable until the client is initialized; optionally add a placeholder in the `k == nil` branch returning `Kubernetes client not initialized yet`
5. Build and test:

```bash
go build -o bin/mcp-server ./cmd/server
printf '{"jsonrpc":"2.0","id":1,"method":"initialize","params":{}}\n{"jsonrpc":"2.0","id":2,"method":"tools/list"}\n' | ./bin/mcp-server
```

## Repository overview

- `cmd/server`: program entry; configures logging to stderr, sets up background K8s init
- `pkg/mcp`: JSON-RPC types and server loop (framed + NDJSON); tool registry and results
- `pkg/k8s`: Kubernetes clients and helpers (kubeconfig/in-cluster, resource mapping, logs, etc.)
- `internal/tools`: tool groups (cluster, workloads, resources, secrets)
- `scripts`: scripts for validation and handshake
- `examples`: sample MCP configuration

Happy hacking!
